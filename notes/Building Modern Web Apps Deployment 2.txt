# Building Modern Web Apps (Deployment)

## Using a Config File

How do you deal with different configurations for different setups? Let's create a config module at the route:

```
/* config.js */
const config = {
  'localhost': {
    authUrl: 'https://labelr-localhost.herokuapp.com/authenticate',
    clientId: 'f8dd69187841cdd22a26'
  },
  'labelr.surge.sh': {
    authUrl: 'https://labelr-production.herokuapp.com/authenticate',
    clientId: '9cc77faf5ffc6f6f9b9a'
  }
}[window.location.hostname]

export default config
```

Import the config file and remove t

```
/* router.js */
login () {
    window.location = 'https://github.com/login/oauth/authorize?' + qs.stringify({
      scope: 'user,repo',
      redirect_uri: window.location.origin + '/auth/callback',
      client_id: config.clientId
    });
},

authCallback (query) {
    query = qs.parse(query)

    xhr({
      // we're inputting our client secret in heroku
      // allowing us to hide our client_secret
      url: config.authUrl + '/' + query.code,
      json: true
    }, (err, req, body) => {
      app.me.token = body.token
      // replaces the history using internal navigation
      this.redirectTo('/repos')
    })

    this.renderPage(<MessagePage title='Fetching your data' />)
},
```

## Deploying with Surge

[https://surge.sh/](https://surge.sh/)

Surge allows you to create static websites for FREE.

In the package.json we can specify our deploy script:

`"surge -p DIRECTORY -d DOMAIN"`

```
/* package.json */
  "scripts": {
    "build": "webpack",
    "deploy": "surge -p public -d labelr.surge.sh",
    "start": "webpack-dev-server",
    "yolo": "git add --all && git cm \"$(date)\" && npm version minor && git push origin master --tags && npm run build"
  }
}
```

Because we didn't have a 200 page build in our public folder, let's customize our webpack config to generate that file.

```
/* webpack.config.js */
var getConfig = require('hjs-webpack')

module.exports = getConfig({
	in: 'src/app.js',
  out: 'public',
  clearBeforeBuild: true,
  html: function(context) {
    return {
      'index.html': context.defaultTemplate(),
      '200.html': context.defaultTemplate()
    }
  }
})
```