# Building Modern Web Apps (Repo Labels)

## Exercise: Storing Labels

The exercise is to first make two models, a label and a label collection and connect them to the repo model. Then, render the labels on the page.

A repo can have a label collection (therefore many labels).

1. Make Label and Label Collection models
2. Define Label properties
3. Connect Label to the Label Collection model
4. Make sure Label Collection will fetch correctly (Authentication and URL)
5. Connect the Label Collection to the Repo model
6. Fetch the newest labels
7. Render it in the page

**2. Define Label properties**
```
/* label.js */
import Model from 'ampersand-model'

export default Model.extend({

  props: {
    name: 'string',
    color: 'string'
  }
})
```

**3. Connect label to the label collection model**
```
/* label-collection.js */
import Collection from 'ampersand-rest-collection'
import Label from './label'

export default Collection.extend({
	// build URL /repos/user/repo/labels
  url () {

  },
	
	// Connect label to the label collection model
  model: Label
})
```

**4. Make sure Label Collection will fetch correctly (Authentication and URL)**
```
/* label-collection.js */
import Collection from 'ampersand-rest-collection'
import Label from './label'
import githubMixin from '../helpers/github-mixin'

export default Collection.extend(githubMixin, {
  // build URL /repos/user/repo/labels
  url () {
		// this.parent connects parent model
    return this.parent.url() + '/labels'
  },
	
  // Connect label to the label collection model
  model: Label
})
```

**5. Connect the Label Collection to the Repo model**

```
/* repo.js */
import LabelCollection from './label-collection'
	...
	// Connect label collection to the repo model
	collections: {
		labels: LabelCollection
	}
})
```

**6. Fetch the latest labels**
```
/* repos.js */
fetch () {
	Model.prototype.fetch.apply(this, arguments)
	this.labels.fetch()
}
```

**7. Render it in the page**
```
/* router.js */
repoDetail (owner, name) {
	const model = app.me.repos.getByFullName(owner + '/' + name)
	// passing labels so we can observe them
	this.renderPage(<RepoDetail repo={model} labels={model.label} />)
},
```

```
/* repo-detail.js */
import React from 'react'
import ampersandMixin from 'ampersand-react-mixin'

export default React.createClass({
  mixins: ['ampersandMixin'],
  displayName: 'RepoDetail',

  render () {
    const {repo, labels} = this.props

    return (
      <div className='container'>
        <h1>{repo.full_name}</h1>
        <p></p>
        <ul>
          {labels.map((label) => {
            let cssColor = '#' + label.color

            return (
              <li>
                <div className='label'>
                  <span className='label-color' style={{backgroundColor: cssColor}}>&nbsp;{label.name}</span>
                  <span></span>
                  <span className='octicon octicon-pencil'></span>
                  <span className='octicon octicon-x'></span>
                </div>
              </li>
            )
          })}
        </ul>
      </div>
    )
  }
})
```

## Using extend()

Extend merges two objects. When we extend the Model, they get added to the Model.prototype.

## Exercise: Creating a Label Item Component

1. Create a React component with createClass and a render() function that returns the label name
2. Import ampersand-react-mixin (include this) and the LabelItem component. 
3. Iterate over labels and return label component, passing in necessary model data.

**Create a React component**
```
import React from 'react'

export default React.createClass({
  
  render () {
    const {label} = this.props  
  
    return (<li>{label.name}</li>)
  }
})
```

**Import ampersand-react-mixin and LabelItem**
```
import ampersandMixin from 'ampersand-react-mixin'
import LabelItem from '../components/label-item'

export default React.createClass({
  mixins: ['ampersandMixin'],
	...
```

**Iterate over labels, pass in model data**
```
{repo.labels.map((label) => {
    return <LabelItem key={label.name} label={label} />
})}
```

## Adding an Editing State

Let's edit our `label-item.js` to include our basic states.

```
/* label-item.js */
// editing
if (label.editing) {
  content = (
    <form className='label'>
      <span className='label-color avatar avatar-small avatar-rounded'>&nbsp;</span>
      <input name='name'/>
      <input name='color'/>
      <button type='submit' className='button button-small'>Save</button>
      <button type='button' className='button button-small button-unstyled'>cancel</button>
    </form>
  )
} else {
  content = (
    <div className='label'>
      <span className='label-color' style={{backgroundColor: cssColor}}>&nbsp;{label.name}</span>
      <span></span>
      <span className='octicon octicon-pencil'></span>
      <span className='octicon octicon-x'></span>
    </div>
  )
}

return (
  <div>{content}</div>
)
```

Now we can create a state in the model to determine if it's in editing:

```
/* model/label.js */
session: {
	editing: {
	  type: 'boolean',
	  default: false
	}
}
```

Why use session? Session and props are provided by ampersand model, and session is stored local by the browser, props is sent to the server.

## Label Colors

```
/* label-item.js */
const cssColor = label.color
...
```

## Exercise: Changing Label State

```
/* label-item.js */
...
mixins: [ampersandMixin],
onEditClick () {
	this.props.label.editing = true
},
onCancelClick () {
	this.props.label.editing = false
},
...
<button onClick={this.onCancelClick}>cancel</button>
...
<span onClick={this.onEditClick}></span>
```

## Exercise: Deleting a Label

Looking at the Github API, we just need to follow this URL structure:

`DELETE /repos/:owner/:repo/labels/:name`

Because Ampersand REST model comes with CRUD operations, we simply need to help it build the URL structure. We can specify `idAttribute` for `'name'`.

```
/* model/label.js */
import Model from 'ampersand-model'
import githubMixin from '../helpers/github-mixin'

export default Model.extend(githubMixin, {
	idAttribute: 'name',
	...
}
```

```
/* label-item.js */
onDeleteClick (event) {
	event.preventDefault()
	this.props.label.destroy()
},
...
<span onClick={this.onDeleteClick} className='octicon octicon-x'></span>
```